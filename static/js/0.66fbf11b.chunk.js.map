{"version":3,"sources":["../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isArray.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/filterOutFalsy.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/utils/isPrimitive.ts","../../src/logic/getFieldsValues.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getFieldArrayParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx"],"names":["module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","runtime","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","method","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","obj","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","invoke","result","__await","unwrapped","TypeError","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","_createForOfIteratorHelper","o","Array","isArray","unsupportedIterableToArray","F","s","n","e","_e","f","it","normalCompletion","didErr","step","_e2","_toConsumableArray","arr","arrayLikeToArray","from","_defineProperty","defineProperty","enumerable","configurable","writable","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","test","input","replace","match","mathNumber","mathQuote","originalString","set","path","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isObject","data","entries","reduce","previous","val","filter","Boolean","defaultValue","filterOutFalsy","split","isUndefined","fields","fieldErrors","get","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","option","checked","element","defaultResult","validResult","map","attributes","getFieldValue","fieldsRef","shallowFieldsStateRef","excludeDisabled","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","removeAllEventListeners","setFieldArrayDirtyFields","defaultValues","dirtyFields","parentName","search","output","isString","startsWith","find","deepMerge","target","source","isPrimitive","targetValue","sourceValue","deepEqual","object1","object2","isErrorObject","keys1","keys2","includes","val1","val2","isErrorStateChanged","errors","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","validateAllFieldCriteria","types","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","maxLengthValue","minLengthValue","inputLength","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","validateResult","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","mode","isOnSubmit","isWindowUndefined","isWeb","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","watchFieldsRef","Set","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","shouldRenderBaseOnError","shouldRender","shouldReRender","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","isFieldWatched","renderWatchedInputs","found","size","getFieldArrayParentName","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","validateResolver","removeFieldEventListener","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","watch","unregister","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","isSelectInput","register","refOrValidationOptions","rules","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","control","prop","FormContext","React.createContext"],"mappings":"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","file":"static/js/0.66fbf11b.chunk.js","sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): string[] => {\n  const result: string[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport filterOutFalsy from './filterOutFalsy';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = filterOutFalsy(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport filterOutFalsy from '../utils/filterOutFalsy';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      filterOutFalsy(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !filterOutFalsy(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import { get } from '../utils';\nimport isArray from '../utils/isArray';\nimport set from '../utils/set';\n\nexport default function setFieldArrayDirtyFields<\n  T extends U,\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setFieldArrayDirtyFields(\n          values[index][key],\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n    !dirtyFields.length &&\n      parentNode &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields.length ? dirtyFields : undefined;\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject({ ...((shallowFieldsStateRef || {}).current || {}) }),\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      if (\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (isArray(targetValue) && isArray(sourceValue))\n      ) {\n        target[key] = deepMerge(targetValue, sourceValue);\n      } else {\n        target[key] = sourceValue;\n      }\n    } catch {}\n  }\n\n  return target;\n}\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(\n  object1: any = [],\n  object2: any = [],\n  isErrorObject?: boolean,\n) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function isErrorStateChanged<TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef(\n    shouldUnregister ? {} : { ...defaultValues },\n  );\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = () =>\n    !deepEqual(\n      getValues(),\n      isEmptyObject(defaultValuesRef.current)\n        ? defaultValuesAtRenderRef.current\n        : defaultValuesRef.current,\n    ) || !isEmptyObject(formStateRef.current.dirtyFields);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty =\n          get(defaultValuesAtRenderRef.current, name) !==\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        if (isChanged && shouldRender) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...state,\n          };\n          updateFormState({\n            ...state,\n          });\n        }\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig = {},\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            readFormStateRef.current.isDirty ||\n            readFormStateRef.current.dirtyFields\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: TFieldValue extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n    (config || {}).shouldValidate && trigger(name as any);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n\n            error = get(errors, name);\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !data[value]) {\n          data = {\n            ...data,\n            [value]: [],\n          };\n        }\n      }\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(fieldsRef, shallowFieldsStateRef),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !filterOutFalsy(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          resolverRef.current && validateResolver();\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName]\n          ? isKey(inputName)\n            ? delete formStateRef.current.errors[inputName]\n            : set(formStateRef.current.errors, inputName, undefined)\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        shallowFieldsStateRef,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          filterOutFalsy(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...filterOutFalsy((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(fieldsRef, shallowFieldsStateRef, true),\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        updateFormState({\n          isSubmitting: true,\n        });\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(fieldErrors, e));\n          shouldFocusError && focusOnErrorField(fieldsRef.current, fieldErrors);\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    shallowFieldsStateRef.current = shouldUnregister ? {} : { ...values } || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n  };\n\n  observerRef.current =\n    observerRef.current || !isWeb\n      ? observerRef.current\n      : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n    resolver && readFormStateRef.current.isValid && validateResolver();\n\n    return () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n      shallowFieldsStateRef.current = {};\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      fieldsRef.current &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = {\n    renderWatchedInputs,\n    shouldUnregister,\n    removeFieldEventListener,\n    watchInternal,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    fieldArrayDefaultValuesRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    readFormStateRef,\n    formStateRef,\n    defaultValuesRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n"],"sourceRoot":""}